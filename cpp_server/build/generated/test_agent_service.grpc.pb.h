// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: test_agent_service.proto
#ifndef GRPC_test_5fagent_5fservice_2eproto__INCLUDED
#define GRPC_test_5fagent_5fservice_2eproto__INCLUDED

#include "test_agent_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace wayve {
namespace driver {
namespace tests {
namespace protobuf {

class TestAgentService final {
 public:
  static constexpr char const* service_full_name() {
    return "wayve.driver.tests.protobuf.TestAgentService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status IsWayveDriverMock(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::wayve::driver::tests::protobuf::Boolean* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Boolean>> AsyncIsWayveDriverMock(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Boolean>>(AsyncIsWayveDriverMockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Boolean>> PrepareAsyncIsWayveDriverMock(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Boolean>>(PrepareAsyncIsWayveDriverMockRaw(context, request, cq));
    }
    virtual ::grpc::Status GetWayveDriverVersion(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::WayveDriverVersionResponse>> AsyncGetWayveDriverVersion(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::WayveDriverVersionResponse>>(AsyncGetWayveDriverVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::WayveDriverVersionResponse>> PrepareAsyncGetWayveDriverVersion(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::WayveDriverVersionResponse>>(PrepareAsyncGetWayveDriverVersionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetIntegrationStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::wayve::driver::tests::protobuf::IntegrationStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::IntegrationStatusResponse>> AsyncGetIntegrationStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::IntegrationStatusResponse>>(AsyncGetIntegrationStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::IntegrationStatusResponse>> PrepareAsyncGetIntegrationStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::IntegrationStatusResponse>>(PrepareAsyncGetIntegrationStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status GetModelId(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::wayve::driver::tests::protobuf::ModelIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::ModelIdResponse>> AsyncGetModelId(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::ModelIdResponse>>(AsyncGetModelIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::ModelIdResponse>> PrepareAsyncGetModelId(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::ModelIdResponse>>(PrepareAsyncGetModelIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::wayve::driver::tests::protobuf::TraceEvent>> StreamTrace(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::wayve::driver::tests::protobuf::TraceEvent>>(StreamTraceRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::wayve::driver::tests::protobuf::TraceEvent>> AsyncStreamTrace(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::wayve::driver::tests::protobuf::TraceEvent>>(AsyncStreamTraceRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::wayve::driver::tests::protobuf::TraceEvent>> PrepareAsyncStreamTrace(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::wayve::driver::tests::protobuf::TraceEvent>>(PrepareAsyncStreamTraceRaw(context, request, cq));
    }
    virtual ::grpc::Status GetServiceStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::wayve::driver::tests::protobuf::ServiceStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::ServiceStatusResponse>> AsyncGetServiceStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::ServiceStatusResponse>>(AsyncGetServiceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::ServiceStatusResponse>> PrepareAsyncGetServiceStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::ServiceStatusResponse>>(PrepareAsyncGetServiceStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status StartService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::wayve::driver::tests::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>> AsyncStartService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>>(AsyncStartServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>> PrepareAsyncStartService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>>(PrepareAsyncStartServiceRaw(context, request, cq));
    }
    virtual ::grpc::Status StopService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::wayve::driver::tests::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>> AsyncStopService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>>(AsyncStopServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>> PrepareAsyncStopService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>>(PrepareAsyncStopServiceRaw(context, request, cq));
    }
    virtual ::grpc::Status EngageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::wayve::driver::tests::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>> AsyncEngageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>>(AsyncEngageWayveDriverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>> PrepareAsyncEngageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>>(PrepareAsyncEngageWayveDriverRaw(context, request, cq));
    }
    virtual ::grpc::Status DisengageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::wayve::driver::tests::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>> AsyncDisengageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>>(AsyncDisengageWayveDriverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>> PrepareAsyncDisengageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>>(PrepareAsyncDisengageWayveDriverRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void IsWayveDriverMock(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Boolean* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsWayveDriverMock(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Boolean* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetWayveDriverVersion(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWayveDriverVersion(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetIntegrationStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::IntegrationStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetIntegrationStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::IntegrationStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetModelId(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::ModelIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetModelId(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::ModelIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StreamTrace(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::grpc::ClientReadReactor< ::wayve::driver::tests::protobuf::TraceEvent>* reactor) = 0;
      virtual void GetServiceStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::ServiceStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetServiceStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::ServiceStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StartService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StopService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void EngageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EngageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DisengageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DisengageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Boolean>* AsyncIsWayveDriverMockRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Boolean>* PrepareAsyncIsWayveDriverMockRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::WayveDriverVersionResponse>* AsyncGetWayveDriverVersionRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::WayveDriverVersionResponse>* PrepareAsyncGetWayveDriverVersionRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::IntegrationStatusResponse>* AsyncGetIntegrationStatusRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::IntegrationStatusResponse>* PrepareAsyncGetIntegrationStatusRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::ModelIdResponse>* AsyncGetModelIdRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::ModelIdResponse>* PrepareAsyncGetModelIdRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::wayve::driver::tests::protobuf::TraceEvent>* StreamTraceRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::wayve::driver::tests::protobuf::TraceEvent>* AsyncStreamTraceRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::wayve::driver::tests::protobuf::TraceEvent>* PrepareAsyncStreamTraceRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::ServiceStatusResponse>* AsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::ServiceStatusResponse>* PrepareAsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>* AsyncStartServiceRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>* PrepareAsyncStartServiceRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>* AsyncStopServiceRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>* PrepareAsyncStopServiceRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>* AsyncEngageWayveDriverRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>* PrepareAsyncEngageWayveDriverRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>* AsyncDisengageWayveDriverRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wayve::driver::tests::protobuf::Empty>* PrepareAsyncDisengageWayveDriverRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status IsWayveDriverMock(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::wayve::driver::tests::protobuf::Boolean* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Boolean>> AsyncIsWayveDriverMock(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Boolean>>(AsyncIsWayveDriverMockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Boolean>> PrepareAsyncIsWayveDriverMock(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Boolean>>(PrepareAsyncIsWayveDriverMockRaw(context, request, cq));
    }
    ::grpc::Status GetWayveDriverVersion(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::WayveDriverVersionResponse>> AsyncGetWayveDriverVersion(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::WayveDriverVersionResponse>>(AsyncGetWayveDriverVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::WayveDriverVersionResponse>> PrepareAsyncGetWayveDriverVersion(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::WayveDriverVersionResponse>>(PrepareAsyncGetWayveDriverVersionRaw(context, request, cq));
    }
    ::grpc::Status GetIntegrationStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::wayve::driver::tests::protobuf::IntegrationStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::IntegrationStatusResponse>> AsyncGetIntegrationStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::IntegrationStatusResponse>>(AsyncGetIntegrationStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::IntegrationStatusResponse>> PrepareAsyncGetIntegrationStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::IntegrationStatusResponse>>(PrepareAsyncGetIntegrationStatusRaw(context, request, cq));
    }
    ::grpc::Status GetModelId(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::wayve::driver::tests::protobuf::ModelIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::ModelIdResponse>> AsyncGetModelId(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::ModelIdResponse>>(AsyncGetModelIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::ModelIdResponse>> PrepareAsyncGetModelId(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::ModelIdResponse>>(PrepareAsyncGetModelIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::wayve::driver::tests::protobuf::TraceEvent>> StreamTrace(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::wayve::driver::tests::protobuf::TraceEvent>>(StreamTraceRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::wayve::driver::tests::protobuf::TraceEvent>> AsyncStreamTrace(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::wayve::driver::tests::protobuf::TraceEvent>>(AsyncStreamTraceRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::wayve::driver::tests::protobuf::TraceEvent>> PrepareAsyncStreamTrace(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::wayve::driver::tests::protobuf::TraceEvent>>(PrepareAsyncStreamTraceRaw(context, request, cq));
    }
    ::grpc::Status GetServiceStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::wayve::driver::tests::protobuf::ServiceStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::ServiceStatusResponse>> AsyncGetServiceStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::ServiceStatusResponse>>(AsyncGetServiceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::ServiceStatusResponse>> PrepareAsyncGetServiceStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::ServiceStatusResponse>>(PrepareAsyncGetServiceStatusRaw(context, request, cq));
    }
    ::grpc::Status StartService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::wayve::driver::tests::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>> AsyncStartService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>>(AsyncStartServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>> PrepareAsyncStartService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>>(PrepareAsyncStartServiceRaw(context, request, cq));
    }
    ::grpc::Status StopService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::wayve::driver::tests::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>> AsyncStopService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>>(AsyncStopServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>> PrepareAsyncStopService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>>(PrepareAsyncStopServiceRaw(context, request, cq));
    }
    ::grpc::Status EngageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::wayve::driver::tests::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>> AsyncEngageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>>(AsyncEngageWayveDriverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>> PrepareAsyncEngageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>>(PrepareAsyncEngageWayveDriverRaw(context, request, cq));
    }
    ::grpc::Status DisengageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::wayve::driver::tests::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>> AsyncDisengageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>>(AsyncDisengageWayveDriverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>> PrepareAsyncDisengageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>>(PrepareAsyncDisengageWayveDriverRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void IsWayveDriverMock(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Boolean* response, std::function<void(::grpc::Status)>) override;
      void IsWayveDriverMock(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Boolean* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetWayveDriverVersion(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetWayveDriverVersion(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetIntegrationStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::IntegrationStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetIntegrationStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::IntegrationStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetModelId(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::ModelIdResponse* response, std::function<void(::grpc::Status)>) override;
      void GetModelId(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::ModelIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamTrace(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::grpc::ClientReadReactor< ::wayve::driver::tests::protobuf::TraceEvent>* reactor) override;
      void GetServiceStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::ServiceStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetServiceStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::ServiceStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StartService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void StartService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StopService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void StopService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EngageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void EngageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DisengageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DisengageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Boolean>* AsyncIsWayveDriverMockRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Boolean>* PrepareAsyncIsWayveDriverMockRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::WayveDriverVersionResponse>* AsyncGetWayveDriverVersionRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::WayveDriverVersionResponse>* PrepareAsyncGetWayveDriverVersionRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::IntegrationStatusResponse>* AsyncGetIntegrationStatusRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::IntegrationStatusResponse>* PrepareAsyncGetIntegrationStatusRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::ModelIdResponse>* AsyncGetModelIdRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::ModelIdResponse>* PrepareAsyncGetModelIdRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::wayve::driver::tests::protobuf::TraceEvent>* StreamTraceRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request) override;
    ::grpc::ClientAsyncReader< ::wayve::driver::tests::protobuf::TraceEvent>* AsyncStreamTraceRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::wayve::driver::tests::protobuf::TraceEvent>* PrepareAsyncStreamTraceRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::ServiceStatusResponse>* AsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::ServiceStatusResponse>* PrepareAsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>* AsyncStartServiceRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>* PrepareAsyncStartServiceRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>* AsyncStopServiceRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>* PrepareAsyncStopServiceRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>* AsyncEngageWayveDriverRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>* PrepareAsyncEngageWayveDriverRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>* AsyncDisengageWayveDriverRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>* PrepareAsyncDisengageWayveDriverRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_IsWayveDriverMock_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWayveDriverVersion_;
    const ::grpc::internal::RpcMethod rpcmethod_GetIntegrationStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetModelId_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamTrace_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServiceStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_StartService_;
    const ::grpc::internal::RpcMethod rpcmethod_StopService_;
    const ::grpc::internal::RpcMethod rpcmethod_EngageWayveDriver_;
    const ::grpc::internal::RpcMethod rpcmethod_DisengageWayveDriver_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status IsWayveDriverMock(::grpc::ServerContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Boolean* response);
    virtual ::grpc::Status GetWayveDriverVersion(::grpc::ServerContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse* response);
    virtual ::grpc::Status GetIntegrationStatus(::grpc::ServerContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::IntegrationStatusResponse* response);
    virtual ::grpc::Status GetModelId(::grpc::ServerContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::ModelIdResponse* response);
    virtual ::grpc::Status StreamTrace(::grpc::ServerContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::grpc::ServerWriter< ::wayve::driver::tests::protobuf::TraceEvent>* writer);
    virtual ::grpc::Status GetServiceStatus(::grpc::ServerContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::ServiceStatusResponse* response);
    virtual ::grpc::Status StartService(::grpc::ServerContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::Empty* response);
    virtual ::grpc::Status StopService(::grpc::ServerContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::Empty* response);
    virtual ::grpc::Status EngageWayveDriver(::grpc::ServerContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Empty* response);
    virtual ::grpc::Status DisengageWayveDriver(::grpc::ServerContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_IsWayveDriverMock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsWayveDriverMock() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_IsWayveDriverMock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsWayveDriverMock(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::Boolean* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsWayveDriverMock(::grpc::ServerContext* context, ::wayve::driver::tests::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::wayve::driver::tests::protobuf::Boolean>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWayveDriverVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWayveDriverVersion() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetWayveDriverVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWayveDriverVersion(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWayveDriverVersion(::grpc::ServerContext* context, ::wayve::driver::tests::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::wayve::driver::tests::protobuf::WayveDriverVersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIntegrationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetIntegrationStatus() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetIntegrationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIntegrationStatus(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::IntegrationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIntegrationStatus(::grpc::ServerContext* context, ::wayve::driver::tests::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::wayve::driver::tests::protobuf::IntegrationStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetModelId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetModelId() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetModelId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelId(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::ModelIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelId(::grpc::ServerContext* context, ::wayve::driver::tests::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::wayve::driver::tests::protobuf::ModelIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamTrace() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_StreamTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamTrace(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::wayve::driver::tests::protobuf::TraceEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamTrace(::grpc::ServerContext* context, ::wayve::driver::tests::protobuf::Empty* request, ::grpc::ServerAsyncWriter< ::wayve::driver::tests::protobuf::TraceEvent>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* /*request*/, ::wayve::driver::tests::protobuf::ServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceStatus(::grpc::ServerContext* context, ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::wayve::driver::tests::protobuf::ServiceStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartService() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_StartService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartService(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartService(::grpc::ServerContext* context, ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::wayve::driver::tests::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopService() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_StopService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopService(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopService(::grpc::ServerContext* context, ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::wayve::driver::tests::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EngageWayveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EngageWayveDriver() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_EngageWayveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EngageWayveDriver(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEngageWayveDriver(::grpc::ServerContext* context, ::wayve::driver::tests::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::wayve::driver::tests::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DisengageWayveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DisengageWayveDriver() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_DisengageWayveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisengageWayveDriver(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisengageWayveDriver(::grpc::ServerContext* context, ::wayve::driver::tests::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::wayve::driver::tests::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_IsWayveDriverMock<WithAsyncMethod_GetWayveDriverVersion<WithAsyncMethod_GetIntegrationStatus<WithAsyncMethod_GetModelId<WithAsyncMethod_StreamTrace<WithAsyncMethod_GetServiceStatus<WithAsyncMethod_StartService<WithAsyncMethod_StopService<WithAsyncMethod_EngageWayveDriver<WithAsyncMethod_DisengageWayveDriver<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_IsWayveDriverMock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IsWayveDriverMock() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Boolean>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Boolean* response) { return this->IsWayveDriverMock(context, request, response); }));}
    void SetMessageAllocatorFor_IsWayveDriverMock(
        ::grpc::MessageAllocator< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Boolean>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Boolean>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IsWayveDriverMock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsWayveDriverMock(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::Boolean* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsWayveDriverMock(
      ::grpc::CallbackServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::Boolean* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetWayveDriverVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetWayveDriverVersion() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse* response) { return this->GetWayveDriverVersion(context, request, response); }));}
    void SetMessageAllocatorFor_GetWayveDriverVersion(
        ::grpc::MessageAllocator< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetWayveDriverVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWayveDriverVersion(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWayveDriverVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetIntegrationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetIntegrationStatus() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::IntegrationStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::IntegrationStatusResponse* response) { return this->GetIntegrationStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetIntegrationStatus(
        ::grpc::MessageAllocator< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::IntegrationStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::IntegrationStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetIntegrationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIntegrationStatus(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::IntegrationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetIntegrationStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::IntegrationStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetModelId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetModelId() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::ModelIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::ModelIdResponse* response) { return this->GetModelId(context, request, response); }));}
    void SetMessageAllocatorFor_GetModelId(
        ::grpc::MessageAllocator< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::ModelIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::ModelIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetModelId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelId(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::ModelIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelId(
      ::grpc::CallbackServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::ModelIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamTrace() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::TraceEvent>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::wayve::driver::tests::protobuf::Empty* request) { return this->StreamTrace(context, request); }));
    }
    ~WithCallbackMethod_StreamTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamTrace(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::wayve::driver::tests::protobuf::TraceEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::wayve::driver::tests::protobuf::TraceEvent>* StreamTrace(
      ::grpc::CallbackServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::ServiceStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::ServiceStatusResponse* response) { return this->GetServiceStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetServiceStatus(
        ::grpc::MessageAllocator< ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::ServiceStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::ServiceStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* /*request*/, ::wayve::driver::tests::protobuf::ServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServiceStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* /*request*/, ::wayve::driver::tests::protobuf::ServiceStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StartService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StartService() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::Empty* response) { return this->StartService(context, request, response); }));}
    void SetMessageAllocatorFor_StartService(
        ::grpc::MessageAllocator< ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StartService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartService(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartService(
      ::grpc::CallbackServerContext* /*context*/, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StopService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StopService() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::Empty* response) { return this->StopService(context, request, response); }));}
    void SetMessageAllocatorFor_StopService(
        ::grpc::MessageAllocator< ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StopService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopService(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopService(
      ::grpc::CallbackServerContext* /*context*/, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EngageWayveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EngageWayveDriver() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Empty* response) { return this->EngageWayveDriver(context, request, response); }));}
    void SetMessageAllocatorFor_EngageWayveDriver(
        ::grpc::MessageAllocator< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EngageWayveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EngageWayveDriver(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EngageWayveDriver(
      ::grpc::CallbackServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DisengageWayveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DisengageWayveDriver() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Empty* response) { return this->DisengageWayveDriver(context, request, response); }));}
    void SetMessageAllocatorFor_DisengageWayveDriver(
        ::grpc::MessageAllocator< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DisengageWayveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisengageWayveDriver(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DisengageWayveDriver(
      ::grpc::CallbackServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_IsWayveDriverMock<WithCallbackMethod_GetWayveDriverVersion<WithCallbackMethod_GetIntegrationStatus<WithCallbackMethod_GetModelId<WithCallbackMethod_StreamTrace<WithCallbackMethod_GetServiceStatus<WithCallbackMethod_StartService<WithCallbackMethod_StopService<WithCallbackMethod_EngageWayveDriver<WithCallbackMethod_DisengageWayveDriver<Service > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_IsWayveDriverMock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsWayveDriverMock() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_IsWayveDriverMock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsWayveDriverMock(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::Boolean* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWayveDriverVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWayveDriverVersion() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetWayveDriverVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWayveDriverVersion(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIntegrationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetIntegrationStatus() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetIntegrationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIntegrationStatus(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::IntegrationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetModelId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetModelId() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetModelId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelId(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::ModelIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamTrace() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_StreamTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamTrace(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::wayve::driver::tests::protobuf::TraceEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* /*request*/, ::wayve::driver::tests::protobuf::ServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartService() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_StartService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartService(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopService() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_StopService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopService(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EngageWayveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EngageWayveDriver() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_EngageWayveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EngageWayveDriver(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DisengageWayveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DisengageWayveDriver() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_DisengageWayveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisengageWayveDriver(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsWayveDriverMock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsWayveDriverMock() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_IsWayveDriverMock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsWayveDriverMock(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::Boolean* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsWayveDriverMock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWayveDriverVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWayveDriverVersion() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetWayveDriverVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWayveDriverVersion(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWayveDriverVersion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetIntegrationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetIntegrationStatus() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetIntegrationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIntegrationStatus(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::IntegrationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIntegrationStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetModelId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetModelId() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetModelId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelId(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::ModelIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModelId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamTrace() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_StreamTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamTrace(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::wayve::driver::tests::protobuf::TraceEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamTrace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* /*request*/, ::wayve::driver::tests::protobuf::ServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartService() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_StartService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartService(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopService() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_StopService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopService(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EngageWayveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EngageWayveDriver() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_EngageWayveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EngageWayveDriver(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEngageWayveDriver(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DisengageWayveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DisengageWayveDriver() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_DisengageWayveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisengageWayveDriver(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisengageWayveDriver(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IsWayveDriverMock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IsWayveDriverMock() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsWayveDriverMock(context, request, response); }));
    }
    ~WithRawCallbackMethod_IsWayveDriverMock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsWayveDriverMock(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::Boolean* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsWayveDriverMock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetWayveDriverVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetWayveDriverVersion() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetWayveDriverVersion(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetWayveDriverVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWayveDriverVersion(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWayveDriverVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetIntegrationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetIntegrationStatus() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetIntegrationStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetIntegrationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIntegrationStatus(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::IntegrationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetIntegrationStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetModelId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetModelId() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetModelId(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetModelId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModelId(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::ModelIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModelId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamTrace() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamTrace(context, request); }));
    }
    ~WithRawCallbackMethod_StreamTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamTrace(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::wayve::driver::tests::protobuf::TraceEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamTrace(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServiceStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* /*request*/, ::wayve::driver::tests::protobuf::ServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServiceStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StartService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StartService() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartService(context, request, response); }));
    }
    ~WithRawCallbackMethod_StartService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartService(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StopService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StopService() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopService(context, request, response); }));
    }
    ~WithRawCallbackMethod_StopService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopService(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EngageWayveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EngageWayveDriver() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EngageWayveDriver(context, request, response); }));
    }
    ~WithRawCallbackMethod_EngageWayveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EngageWayveDriver(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EngageWayveDriver(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DisengageWayveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DisengageWayveDriver() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DisengageWayveDriver(context, request, response); }));
    }
    ~WithRawCallbackMethod_DisengageWayveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisengageWayveDriver(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DisengageWayveDriver(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsWayveDriverMock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsWayveDriverMock() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Boolean>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Boolean>* streamer) {
                       return this->StreamedIsWayveDriverMock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsWayveDriverMock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsWayveDriverMock(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::Boolean* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsWayveDriverMock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::wayve::driver::tests::protobuf::Empty,::wayve::driver::tests::protobuf::Boolean>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWayveDriverVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWayveDriverVersion() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse>* streamer) {
                       return this->StreamedGetWayveDriverVersion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetWayveDriverVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWayveDriverVersion(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWayveDriverVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::wayve::driver::tests::protobuf::Empty,::wayve::driver::tests::protobuf::WayveDriverVersionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetIntegrationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetIntegrationStatus() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::IntegrationStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::IntegrationStatusResponse>* streamer) {
                       return this->StreamedGetIntegrationStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetIntegrationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIntegrationStatus(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::IntegrationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetIntegrationStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::wayve::driver::tests::protobuf::Empty,::wayve::driver::tests::protobuf::IntegrationStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetModelId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetModelId() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::ModelIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::ModelIdResponse>* streamer) {
                       return this->StreamedGetModelId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetModelId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetModelId(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::ModelIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetModelId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::wayve::driver::tests::protobuf::Empty,::wayve::driver::tests::protobuf::ModelIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::ServiceStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::ServiceStatusResponse>* streamer) {
                       return this->StreamedGetServiceStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* /*request*/, ::wayve::driver::tests::protobuf::ServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServiceStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::wayve::driver::tests::protobuf::ServiceTypeRequest,::wayve::driver::tests::protobuf::ServiceStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartService() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::Empty>* streamer) {
                       return this->StreamedStartService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartService(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::wayve::driver::tests::protobuf::ServiceTypeRequest,::wayve::driver::tests::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopService() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::Empty>* streamer) {
                       return this->StreamedStopService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StopService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopService(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::wayve::driver::tests::protobuf::ServiceTypeRequest,::wayve::driver::tests::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EngageWayveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EngageWayveDriver() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Empty>* streamer) {
                       return this->StreamedEngageWayveDriver(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EngageWayveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EngageWayveDriver(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEngageWayveDriver(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::wayve::driver::tests::protobuf::Empty,::wayve::driver::tests::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DisengageWayveDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DisengageWayveDriver() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Empty>* streamer) {
                       return this->StreamedDisengageWayveDriver(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DisengageWayveDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DisengageWayveDriver(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::wayve::driver::tests::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDisengageWayveDriver(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::wayve::driver::tests::protobuf::Empty,::wayve::driver::tests::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_IsWayveDriverMock<WithStreamedUnaryMethod_GetWayveDriverVersion<WithStreamedUnaryMethod_GetIntegrationStatus<WithStreamedUnaryMethod_GetModelId<WithStreamedUnaryMethod_GetServiceStatus<WithStreamedUnaryMethod_StartService<WithStreamedUnaryMethod_StopService<WithStreamedUnaryMethod_EngageWayveDriver<WithStreamedUnaryMethod_DisengageWayveDriver<Service > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamTrace() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::TraceEvent>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::TraceEvent>* streamer) {
                       return this->StreamedStreamTrace(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamTrace(::grpc::ServerContext* /*context*/, const ::wayve::driver::tests::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::wayve::driver::tests::protobuf::TraceEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamTrace(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::wayve::driver::tests::protobuf::Empty,::wayve::driver::tests::protobuf::TraceEvent>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamTrace<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_IsWayveDriverMock<WithStreamedUnaryMethod_GetWayveDriverVersion<WithStreamedUnaryMethod_GetIntegrationStatus<WithStreamedUnaryMethod_GetModelId<WithSplitStreamingMethod_StreamTrace<WithStreamedUnaryMethod_GetServiceStatus<WithStreamedUnaryMethod_StartService<WithStreamedUnaryMethod_StopService<WithStreamedUnaryMethod_EngageWayveDriver<WithStreamedUnaryMethod_DisengageWayveDriver<Service > > > > > > > > > > StreamedService;
};

}  // namespace protobuf
}  // namespace tests
}  // namespace driver
}  // namespace wayve


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_test_5fagent_5fservice_2eproto__INCLUDED
