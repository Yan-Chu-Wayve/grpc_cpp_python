// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: test_agent_service.proto

#include "test_agent_service.pb.h"
#include "test_agent_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace wayve {
namespace driver {
namespace tests {
namespace protobuf {

static const char* TestAgentService_method_names[] = {
  "/wayve.driver.tests.protobuf.TestAgentService/IsWayveDriverMock",
  "/wayve.driver.tests.protobuf.TestAgentService/GetWayveDriverVersion",
  "/wayve.driver.tests.protobuf.TestAgentService/GetIntegrationStatus",
  "/wayve.driver.tests.protobuf.TestAgentService/GetModelId",
  "/wayve.driver.tests.protobuf.TestAgentService/StreamTrace",
  "/wayve.driver.tests.protobuf.TestAgentService/GetServiceStatus",
  "/wayve.driver.tests.protobuf.TestAgentService/StartService",
  "/wayve.driver.tests.protobuf.TestAgentService/StopService",
  "/wayve.driver.tests.protobuf.TestAgentService/EngageWayveDriver",
  "/wayve.driver.tests.protobuf.TestAgentService/DisengageWayveDriver",
};

std::unique_ptr< TestAgentService::Stub> TestAgentService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TestAgentService::Stub> stub(new TestAgentService::Stub(channel, options));
  return stub;
}

TestAgentService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_IsWayveDriverMock_(TestAgentService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWayveDriverVersion_(TestAgentService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIntegrationStatus_(TestAgentService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetModelId_(TestAgentService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamTrace_(TestAgentService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetServiceStatus_(TestAgentService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartService_(TestAgentService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopService_(TestAgentService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EngageWayveDriver_(TestAgentService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DisengageWayveDriver_(TestAgentService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TestAgentService::Stub::IsWayveDriverMock(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::wayve::driver::tests::protobuf::Boolean* response) {
  return ::grpc::internal::BlockingUnaryCall< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Boolean, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsWayveDriverMock_, context, request, response);
}

void TestAgentService::Stub::async::IsWayveDriverMock(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Boolean* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Boolean, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsWayveDriverMock_, context, request, response, std::move(f));
}

void TestAgentService::Stub::async::IsWayveDriverMock(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Boolean* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsWayveDriverMock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Boolean>* TestAgentService::Stub::PrepareAsyncIsWayveDriverMockRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::wayve::driver::tests::protobuf::Boolean, ::wayve::driver::tests::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsWayveDriverMock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Boolean>* TestAgentService::Stub::AsyncIsWayveDriverMockRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsWayveDriverMockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TestAgentService::Stub::GetWayveDriverVersion(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetWayveDriverVersion_, context, request, response);
}

void TestAgentService::Stub::async::GetWayveDriverVersion(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWayveDriverVersion_, context, request, response, std::move(f));
}

void TestAgentService::Stub::async::GetWayveDriverVersion(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWayveDriverVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::WayveDriverVersionResponse>* TestAgentService::Stub::PrepareAsyncGetWayveDriverVersionRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::wayve::driver::tests::protobuf::WayveDriverVersionResponse, ::wayve::driver::tests::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetWayveDriverVersion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::WayveDriverVersionResponse>* TestAgentService::Stub::AsyncGetWayveDriverVersionRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWayveDriverVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TestAgentService::Stub::GetIntegrationStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::wayve::driver::tests::protobuf::IntegrationStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::IntegrationStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetIntegrationStatus_, context, request, response);
}

void TestAgentService::Stub::async::GetIntegrationStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::IntegrationStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::IntegrationStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIntegrationStatus_, context, request, response, std::move(f));
}

void TestAgentService::Stub::async::GetIntegrationStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::IntegrationStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIntegrationStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::IntegrationStatusResponse>* TestAgentService::Stub::PrepareAsyncGetIntegrationStatusRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::wayve::driver::tests::protobuf::IntegrationStatusResponse, ::wayve::driver::tests::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetIntegrationStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::IntegrationStatusResponse>* TestAgentService::Stub::AsyncGetIntegrationStatusRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetIntegrationStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TestAgentService::Stub::GetModelId(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::wayve::driver::tests::protobuf::ModelIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::ModelIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetModelId_, context, request, response);
}

void TestAgentService::Stub::async::GetModelId(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::ModelIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::ModelIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModelId_, context, request, response, std::move(f));
}

void TestAgentService::Stub::async::GetModelId(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::ModelIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModelId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::ModelIdResponse>* TestAgentService::Stub::PrepareAsyncGetModelIdRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::wayve::driver::tests::protobuf::ModelIdResponse, ::wayve::driver::tests::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetModelId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::ModelIdResponse>* TestAgentService::Stub::AsyncGetModelIdRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetModelIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::wayve::driver::tests::protobuf::TraceEvent>* TestAgentService::Stub::StreamTraceRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::wayve::driver::tests::protobuf::TraceEvent>::Create(channel_.get(), rpcmethod_StreamTrace_, context, request);
}

void TestAgentService::Stub::async::StreamTrace(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::grpc::ClientReadReactor< ::wayve::driver::tests::protobuf::TraceEvent>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::wayve::driver::tests::protobuf::TraceEvent>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamTrace_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::wayve::driver::tests::protobuf::TraceEvent>* TestAgentService::Stub::AsyncStreamTraceRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::wayve::driver::tests::protobuf::TraceEvent>::Create(channel_.get(), cq, rpcmethod_StreamTrace_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::wayve::driver::tests::protobuf::TraceEvent>* TestAgentService::Stub::PrepareAsyncStreamTraceRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::wayve::driver::tests::protobuf::TraceEvent>::Create(channel_.get(), cq, rpcmethod_StreamTrace_, context, request, false, nullptr);
}

::grpc::Status TestAgentService::Stub::GetServiceStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::wayve::driver::tests::protobuf::ServiceStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::ServiceStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServiceStatus_, context, request, response);
}

void TestAgentService::Stub::async::GetServiceStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::ServiceStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::ServiceStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServiceStatus_, context, request, response, std::move(f));
}

void TestAgentService::Stub::async::GetServiceStatus(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::ServiceStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServiceStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::ServiceStatusResponse>* TestAgentService::Stub::PrepareAsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::wayve::driver::tests::protobuf::ServiceStatusResponse, ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServiceStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::ServiceStatusResponse>* TestAgentService::Stub::AsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServiceStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TestAgentService::Stub::StartService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::wayve::driver::tests::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartService_, context, request, response);
}

void TestAgentService::Stub::async::StartService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartService_, context, request, response, std::move(f));
}

void TestAgentService::Stub::async::StartService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>* TestAgentService::Stub::PrepareAsyncStartServiceRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>* TestAgentService::Stub::AsyncStartServiceRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TestAgentService::Stub::StopService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::wayve::driver::tests::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopService_, context, request, response);
}

void TestAgentService::Stub::async::StopService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopService_, context, request, response, std::move(f));
}

void TestAgentService::Stub::async::StopService(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>* TestAgentService::Stub::PrepareAsyncStopServiceRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>* TestAgentService::Stub::AsyncStopServiceRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TestAgentService::Stub::EngageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::wayve::driver::tests::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EngageWayveDriver_, context, request, response);
}

void TestAgentService::Stub::async::EngageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EngageWayveDriver_, context, request, response, std::move(f));
}

void TestAgentService::Stub::async::EngageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EngageWayveDriver_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>* TestAgentService::Stub::PrepareAsyncEngageWayveDriverRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EngageWayveDriver_, context, request);
}

::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>* TestAgentService::Stub::AsyncEngageWayveDriverRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEngageWayveDriverRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TestAgentService::Stub::DisengageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::wayve::driver::tests::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DisengageWayveDriver_, context, request, response);
}

void TestAgentService::Stub::async::DisengageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisengageWayveDriver_, context, request, response, std::move(f));
}

void TestAgentService::Stub::async::DisengageWayveDriver(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisengageWayveDriver_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>* TestAgentService::Stub::PrepareAsyncDisengageWayveDriverRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DisengageWayveDriver_, context, request);
}

::grpc::ClientAsyncResponseReader< ::wayve::driver::tests::protobuf::Empty>* TestAgentService::Stub::AsyncDisengageWayveDriverRaw(::grpc::ClientContext* context, const ::wayve::driver::tests::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisengageWayveDriverRaw(context, request, cq);
  result->StartCall();
  return result;
}

TestAgentService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestAgentService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestAgentService::Service, ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Boolean, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestAgentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wayve::driver::tests::protobuf::Empty* req,
             ::wayve::driver::tests::protobuf::Boolean* resp) {
               return service->IsWayveDriverMock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestAgentService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestAgentService::Service, ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestAgentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wayve::driver::tests::protobuf::Empty* req,
             ::wayve::driver::tests::protobuf::WayveDriverVersionResponse* resp) {
               return service->GetWayveDriverVersion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestAgentService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestAgentService::Service, ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::IntegrationStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestAgentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wayve::driver::tests::protobuf::Empty* req,
             ::wayve::driver::tests::protobuf::IntegrationStatusResponse* resp) {
               return service->GetIntegrationStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestAgentService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestAgentService::Service, ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::ModelIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestAgentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wayve::driver::tests::protobuf::Empty* req,
             ::wayve::driver::tests::protobuf::ModelIdResponse* resp) {
               return service->GetModelId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestAgentService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TestAgentService::Service, ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::TraceEvent>(
          [](TestAgentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wayve::driver::tests::protobuf::Empty* req,
             ::grpc::ServerWriter<::wayve::driver::tests::protobuf::TraceEvent>* writer) {
               return service->StreamTrace(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestAgentService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestAgentService::Service, ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::ServiceStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestAgentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wayve::driver::tests::protobuf::ServiceTypeRequest* req,
             ::wayve::driver::tests::protobuf::ServiceStatusResponse* resp) {
               return service->GetServiceStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestAgentService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestAgentService::Service, ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestAgentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wayve::driver::tests::protobuf::ServiceTypeRequest* req,
             ::wayve::driver::tests::protobuf::Empty* resp) {
               return service->StartService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestAgentService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestAgentService::Service, ::wayve::driver::tests::protobuf::ServiceTypeRequest, ::wayve::driver::tests::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestAgentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wayve::driver::tests::protobuf::ServiceTypeRequest* req,
             ::wayve::driver::tests::protobuf::Empty* resp) {
               return service->StopService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestAgentService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestAgentService::Service, ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestAgentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wayve::driver::tests::protobuf::Empty* req,
             ::wayve::driver::tests::protobuf::Empty* resp) {
               return service->EngageWayveDriver(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestAgentService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestAgentService::Service, ::wayve::driver::tests::protobuf::Empty, ::wayve::driver::tests::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestAgentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wayve::driver::tests::protobuf::Empty* req,
             ::wayve::driver::tests::protobuf::Empty* resp) {
               return service->DisengageWayveDriver(ctx, req, resp);
             }, this)));
}

TestAgentService::Service::~Service() {
}

::grpc::Status TestAgentService::Service::IsWayveDriverMock(::grpc::ServerContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Boolean* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestAgentService::Service::GetWayveDriverVersion(::grpc::ServerContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::WayveDriverVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestAgentService::Service::GetIntegrationStatus(::grpc::ServerContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::IntegrationStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestAgentService::Service::GetModelId(::grpc::ServerContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::ModelIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestAgentService::Service::StreamTrace(::grpc::ServerContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::grpc::ServerWriter< ::wayve::driver::tests::protobuf::TraceEvent>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestAgentService::Service::GetServiceStatus(::grpc::ServerContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::ServiceStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestAgentService::Service::StartService(::grpc::ServerContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestAgentService::Service::StopService(::grpc::ServerContext* context, const ::wayve::driver::tests::protobuf::ServiceTypeRequest* request, ::wayve::driver::tests::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestAgentService::Service::EngageWayveDriver(::grpc::ServerContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestAgentService::Service::DisengageWayveDriver(::grpc::ServerContext* context, const ::wayve::driver::tests::protobuf::Empty* request, ::wayve::driver::tests::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace wayve
}  // namespace driver
}  // namespace tests
}  // namespace protobuf
#include <grpcpp/ports_undef.inc>

