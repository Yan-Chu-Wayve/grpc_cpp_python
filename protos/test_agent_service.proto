syntax = "proto3";

package wayve.driver.tests.protobuf;

message Empty {}

message Boolean {
  bool value = 1;
}

message ServiceTypeRequest {
  ServiceType service_type = 1;
}

message ServiceStatusResponse {
  ServiceState state = 1;
}

message IntegrationStatusResponse {
  IntegrationState state = 1;
}

message WayveDriverVersionResponse {
  string version = 1;
}

message ModelIdResponse {
  string model_id = 1;
}

message TraceEvent {
  uint64 timestamp_ns = 1;                    // Timestamp at trace source in nanoseconds
  uint32 groups_mask = 2;                     // Groups related to the trace event
  TraceSeverity severity = 3;                 // Severity of the trace event
  TraceEventType event_type = 4;              // Type of trace event
  bytes message = 5;                          // Binary data of the trace event
}

service TestAgentService {
  rpc IsWayveDriverMock(Empty) returns (Boolean) {}
  rpc GetWayveDriverVersion(Empty) returns (WayveDriverVersionResponse) {}
  rpc GetIntegrationStatus(Empty) returns (IntegrationStatusResponse) {}
  rpc GetModelId(Empty) returns (ModelIdResponse) {}
  rpc StreamTrace(Empty) returns (stream TraceEvent) {}
  rpc GetServiceStatus(ServiceTypeRequest) returns (ServiceStatusResponse) {}
  rpc StartService(ServiceTypeRequest) returns (Empty) {}
  rpc StopService(ServiceTypeRequest) returns (Empty) {}

  rpc EngageWayveDriver(Empty) returns (Empty) {}
  rpc DisengageWayveDriver(Empty) returns (Empty) {}
}

enum ServiceState {
  SERVICE_STATE_UNKNOWN = 0;
  SERVICE_STATE_INITIALIZING = 1;
  SERVICE_STATE_RUNNING = 2;
  SERVICE_STATE_STOPPED = 3;
  SERVICE_STATE_ERROR = 4;
}

enum IntegrationState {
  INTEGRATION_STATE_UNKNOWN = 0;
  INTEGRATION_STATE_INITIALIZING = 1;
  INTEGRATION_STATE_IDLE = 2;
  INTEGRATION_STATE_AV_LIMITED = 3;
  INTEGRATION_STATE_AV = 4;
  INTEGRATION_STATE_MANUAL = 5;
  INTEGRATION_STATE_REMOTE_CONTROL = 6;
  INTEGRATION_STATE_ERROR = 7;
  INTEGRATION_STATE_SHUTDOWN = 8;
}

enum ServiceType {
  SERVICE_TYPE_UNKNOWN = 0;
  SERVICE_TYPE_TRAJECTORY = 1;
  SERVICE_TYPE_NAVIGATION = 2;
  SERVICE_TYPE_INFERENCE = 3;
}

enum TraceGroup {
  TRACE_GROUP_UNKNOWN = 0;
  TRACE_GROUP_TRAJECTORY = 1;       // 1 << 0
  TRACE_GROUP_NAVIGATION = 2;       // 1 << 1
  TRACE_GROUP_INFERENCE = 4;        // 1 << 2
  TRACE_GROUP_SAFETY_CRITICAL = 8;  // 1 << 3
}

enum TraceSeverity {
  TRACE_SEVERITY_UNKNOWN = 0;
  TRACE_SEVERITY_DEBUG = 1;
  TRACE_SEVERITY_INFO = 2;
  TRACE_SEVERITY_ERROR = 3;
}

enum TraceEventType {
  TRACE_EVENT_TYPE_UNKNOWN = 0;
  TRACE_EVENT_TYPE_FUNCTION_CALL = 1;
  TRACE_EVENT_TYPE_LOG_MESSAGE = 2;
} 